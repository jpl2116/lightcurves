#####
##### code for using db in python interactive mode
#####
##### by James Long
##### date Jan 20, 2011
#####


####
#### code for the initial extraction
####
####

import sqlite3
import create_database
import derive_features
import noisification
import db_output
from time import time

## what columns for features in features table
features_file = "derived_features_list.txt" # where we define features

## setup the db
connection = sqlite3.connect('astronomy.db')
cursor = connection.cursor()
create_database.create_db(cursor,features_file=features_file,REMOVE_RECORDS=False)
connection.commit()

## ingest all of debosscher
begin_time = time()
folder = "data/debosscher" # a folder with some curves we can ingest
create_database.ingest_many_xml(folder,cursor,connection,survey="debosscher",original_number=False,number_processors=2)
end_time = time()
end_time - begin_time

## ingest all of ASAS
begin_time = time()
folder = "data/ASAS" # a folder with some curves we can ingest
create_database.ingest_many_xml(folder,cursor,connection,survey="ASAS",original_number=False,number_processors=2)
end_time = time()
end_time - begin_time


## now we derive features (mostly Lomb Scargle) for all of the ingested sources

sql_query = """SELECT source_id FROM sources"""
cursor.execute(sql_query)
db_info = cursor.fetchall()

source_ids_sources = []
for i in db_info:
	source_ids_sources.append(i[0])


sql_query = """SELECT source_id FROM features"""
cursor.execute(sql_query)
db_info = cursor.fetchall()

source_ids_features = []
for i in db_info:
	source_ids_features.append(i[0])



to_derive = []
for i in source_ids_sources:
	if not(i in source_ids_features):
	   to_derive.append(i)



# using 2 processors
begin_time_2 = time() 
derive_features.derive_features_par(to_derive,cursor,connection,number_processors=2)
end_time_2 = time()
end_time_2 - begin_time_2



# output everything to R file
# get all source ids in features table
sql_cmd = """SELECT source_id FROM features"""
cursor.execute(sql_cmd)
db_info = cursor.fetchall()
source_ids = []
for i in db_info:
	source_ids.append(i[0])


source_ids
        
# output the file
db_output.outputRfile(source_ids,cursor,'outputRtest.txt')
db_output.tfeOutput(source_ids,cursor,'tfe.txt')










######
###### get ids for all curves that are Close Binary Eclipsing Systems or 
###### Contact Systems and re-enter versions for noisy curves in sources table
######

import sqlite3
import create_database
import derive_features
import noisification
import db_output
from time import time

## what columns for features in features table
features_file = "derived_features_list.txt" # where we define features

## setup the db
connection = sqlite3.connect('astronomy.db')
cursor = connection.cursor()
create_database.create_db(cursor,features_file=features_file,REMOVE_RECORDS=False)
connection.commit()

#######
####### 1. rename everything test as ASAS
#######

sql_cmd = """SELECT count(*) FROM sources WHERE survey='test'"""
cursor.execute(sql_cmd)
db_info = cursor.fetchall()
print db_info


sql_cmd = """UPDATE sources SET survey='ASAS' WHERE survey='test'"""
cursor.execute(sql_cmd)

sql_cmd = """SELECT count(*) FROM sources WHERE survey='ASAS'"""
cursor.execute(sql_cmd)
db_info = cursor.fetchall()
print db_info

connection.commit()

########
######## 2. delete all records in sources that are noisified source_id != original_source_id
########

sql_cmd = """DELETE FROM sources where source_id != original_source_id"""
cursor.execute(sql_cmd)

sql_cmd = """SELECT count(*) FROM sources"""
cursor.execute(sql_cmd)
db_info = cursor.fetchall()
db_info

connection.commit()

########
######## 3. now grab all records from ASAS
########

sql_cmd = """SELECT * FROM sources WHERE survey='ASAS'"""
cursor.execute(sql_cmd)
db_info = cursor.fetchall()
len(db_info)


sql_cmd = """SELECT datetime('now')"""
cursor.execute(sql_cmd)
the_date = cursor.fetchall()
the_date = the_date[0][0]



the_curves = []
for i in db_info:
	the_curves.append((i[1],i[5],i[6],i[7],i[8],i[9],i[10],the_date,35,0,'',''))

the_curves[0]



sql_cmd = """INSERT INTO sources(original_source_id,classification,survey,c1,e1,c2,e2,date,number_points,noisification,xml_filename,raw_xml) values (?,?,?,?,?,?,?,?,?,?,?,?)"""
k = 0
for i in the_curves:
	cursor.execute(sql_cmd, i)
	k = k + 1
	print "curve: " + repr(k) + " / " + repr(len(the_curves))


connection.commit()



##########
########## end
##########





##########
########## now derive entries from noisified curves
##########

import sqlite3
import create_database
import derive_features
import noisification
import db_output
from time import time
import noisification

## what columns for features in features table
features_file = "derived_features_list.txt" # where we define features

## setup the db
connection = sqlite3.connect('astronomy.db')
cursor = connection.cursor()
create_database.create_db(cursor,features_file=features_file,REMOVE_RECORDS=False)
connection.commit()



sql_cmd = """SELECT source_id,original_source_id FROM sources WHERE source_id != original_source_id"""
cursor.execute(sql_cmd)
db_info = cursor.fetchall()


to_derive = []
original_source_ids = []
for i in db_info:
	to_derive.append(i[0])
	original_source_ids.append(i[1])



derive_features.derive_features_par(to_derive,cursor,connection,number_processors=2,tfe_noisification=noisification.first_35_noisification,original_source_ids=original_source_ids)


connection.commit()


###
### spit those features out to an R file - we are 
###

# get features

to_derive_quote = repr(tuple(to_derive))

sql_cmd = """SELECT count(*) FROM features WHERE source_id IN""" + to_derive_quote
cursor.execute(sql_cmd)
db_info = cursor.fetchall()
db_info



# output the file - make sure the sources ids are correct (features id and sources id are the same)
db_output.outputRfile(to_derive,cursor,'all_asas_35_features.txt')

db_output.tfeOutput(to_derive,cursor,'all_asas_35_tfe.txt')










## print list of class and number in each class by survey type

## take a look at some of the ingested curves
sql_cmd = """SELECT source_id,original_source_id,noisification,classification,number_points,survey,date,xml_filename FROM sources LIMIT 10"""        
cursor.execute(sql_cmd)
db_info = cursor.fetchall()
db_info



## print a few measurements for a source
source_id = db_info[0][0]
sql_cmd = """SELECT time, flux, error FROM measurements WHERE source_id=""" + repr(source_id) + """ LIMIT 10"""
cursor.execute(sql_cmd)
db_info = cursor.fetchall()
db_info



## 
sql_cmd = """SELECT time, flux, error FROM measurements LIMIT 10"""
cursor.execute(sql_cmd)
db_info = cursor.fetchall()
db_info






## view derived features for a source (features are stored in the
## features table)
source_id = db_info[0][0]
sql_cmd = """PRAGMA table_info(features);"""
cursor.execute(sql_cmd)
db_info = cursor.fetchall()
db_info # display feature names
sql_cmd = """SELECT * FROM features WHERE source_id=""" + repr(source_id)
sql_cmd
cursor.execute(sql_cmd)
db_info = cursor.fetchall()
db_info # display feature values







## now we noisify all of the curves in the database by
## adding noise to flux measurements
sql_query = """SELECT source_id FROM sources"""
cursor.execute(sql_query)
db_info = cursor.fetchall()
for i in db_info:
	noisification.sigma_noisification(cursor,i[0])


## source_id != original_source_id indicates that the source is derived from a clean
## curve. here we check that there are in fact
## noisified curves in the data set
sql_query = """SELECT source_id,original_source_id FROM sources WHERE source_id != original_source_id"""
cursor.execute(sql_query)
db_info = cursor.fetchall()
print db_info



## now derive L-S features for all noisified sources
## this may take a while
sql_query = """SELECT source_id FROM sources WHERE source_id != original_source_id"""
cursor.execute(sql_query)
db_info = cursor.fetchall()
for i in db_info:
	derive_features.enter_features(i[0],cursor)
	




##
## test derive features
##

import derive_features
derive_features.derive_features_par('',cursor)













####
#### play around with synthetic light curves
####


import sqlite3
import create_database
import derive_features
import noisification
import db_output
from time import time


## what columns for features in features table
features_file = "derived_features_list.txt" # where we define features

## setup the db
connection = sqlite3.connect('astronomy.db')
cursor = connection.cursor()
create_database.create_db(cursor,features_file=features_file,REMOVE_RECORDS=False)
connection.commit()



sql_cmd = '''SELECT source_id FROM sources WHERE survey = "Synthetic"'''
cursor.execute(sql_cmd)
db_info = cursor.fetchall()
print db_info


sources = []
for i in db_info:
	sources.append(i[0])





sql_cmd = '''SELECT * FROM measurements WHERE source_id IN''' + repr(tuple(sources)) 
cursor.execute(sql_cmd)
db_info = cursor.fetchall()

connection.commit()

len(db_info)


